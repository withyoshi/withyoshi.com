#!/usr/bin/env node

const fs = require("node:fs");
const path = require("node:path");
const CryptoJS = require("crypto-js");

// Simple encryption function
function encrypt(text) {
  const secretKey = process.env.CHATBOT_SECRET_KEY;
  return CryptoJS.AES.encrypt(text, secretKey).toString();
}

// Load environment variables
require("dotenv").config({ path: ".env.local" });

const CHATBOT_SECRET_KEY = process.env.CHATBOT_SECRET_KEY;

if (!CHATBOT_SECRET_KEY) {
  console.error("‚ùå CHATBOT_SECRET_KEY not found in .env.local");
  process.exit(1);
}

// File paths
const baseDir = path.join(__dirname, "..", "lib", "cv", "chatbot", "internal");
const files = {
  core: path.join(baseDir, "core.txt"),
  cv: path.join(baseDir, "cv.txt"),
  faq: path.join(baseDir, "faq.txt"),
  gated: path.join(baseDir, "gated.txt"),
};

const outputPath = path.join(
  __dirname,
  "..",
  "lib",
  "cv",
  "chatbot",
  "data.ts"
);

console.log("üîê Encrypting prompt data...");

// Read and encrypt each file
const encryptedData = {};

for (const [key, filePath] of Object.entries(files)) {
  if (!fs.existsSync(filePath)) {
    console.warn(`‚ö†Ô∏è  File not found: ${filePath}`);
    encryptedData[key] = "";
    continue;
  }

  const content = fs.readFileSync(filePath, "utf8");
  const encrypted = encrypt(content);
  encryptedData[key] = encrypted;
  console.log(`‚úÖ Encrypted ${key}.txt`);
}

// Generate the data.ts file
const dataTsContent = `// This file is auto-generated by npm run encrypt-prompt-data
// Do not edit manually - changes will be overwritten

export const encryptedCorePrompt = '${encryptedData.core}';
export const encryptedCvPrompt = '${encryptedData.cv}';
export const encryptedFaqPrompt = '${encryptedData.faq}';
export const encryptedGatedPrompt = '${encryptedData.gated}';
`;

// Write the data.ts file
fs.writeFileSync(outputPath, dataTsContent, "utf8");

console.log("‚úÖ Generated data.ts successfully");
console.log(`üìÅ Output: ${outputPath}`);
